//EXPLONATION OF OPERATIONS
//EXPLONATION OF OPERATIONS

//TYPE MARKERS
They create a nameless instance of a specific Primitive Type

//SLOT
bracket: {$ tag $} 
one line: [$ tag 
compact:<$tag
The place where we can plus into the template. 
It has a name it can be called by for in case the template has more slots
To plus anything into it the plus relation must be used.

//SPECIAL
bracket: 	{@ code @} 
one line: 	[@ code 
compact: 	<@code

You can write special characters like this, like backspace characters etc..

You can call all characters of UNICODE on severel names(not case sensitive) and the code:
enter: {@ enter @} {@ ent @} {@ E @} {@ e @} {@ u20 @}..
...
The feature is not complite yet

//TEXT
bracket: {" words "} 
one line: [" words 
compact: <"word
You can use this operation to skip all special character inside it.

//TEMPLATE
bracket: {| content |} 
one line: [| content 
compact: <|content
It marks a template. It can use only slots and special characters. Everithing else is skipped.


//REFERENCE
bracket: {& type :& REGEX &} 
one line: [& type :& REGEX 
compact: <&type:&REGEX
It creates a list out of the variables with a name maching the regex

//OPERATION MARKERS
They make operations on the variables

//EXTEND
bracket: {* variable *} 
one line [* variable 
compact: <*variable
You can use this operation to plus the value of a variable into the surrounding language
It includes a special expression.
In case you would like to import a file, you have to use this operation too

You can expend template, synonym, list, structure, file:
expend template:
{* tempName  *}
expend synonime:
{* synName:{@ e @} *} prints them into the surrounding using enter as
expend list:
{* listName:{@ e @} *}
expend file (imports file as text):
{* import:file.txt *}

//PLUS
bracket: {+ left :+ right +} 
one line: [+ left :+ right 
compact: <+left:+right
You can use this operation to plus an element into a slot or a list of that type of elements
"into" is the template, "here" is the slot, "this" is the other object.
In case you would like to plus the content of a text file into a template you can use this variable

You can plus template into template, synonim into any variable, list into template, template into list,
structure instance into template, template into structure instance, structure instance into list,list of structure instances into template, list into list
template into template:
{+ temp1.s1 :+ temp2 +}
synonim into any variable:
{+ var.names :+ syn +}
list into template:
{+ temp.s1 :+ list +}
template into list:
{+ list :+ temp +}
template into all list items:
{+ list.items :+ temp +}
template into specific list item:
{+ list.index :+ temp +}
structure instance into template:
{+ temp :+ struct : s1 :+ a1, s2 :+ a2, s3 :+ a3 +}
template into structure instance:
{+ struct.a1 :+ temp +}
structure instance into list:
{+ list :+ struture +}
list of structure instances into template:
{+ temp :+ list_of_struct : s1 :+ a1, s2 :+ a2, s3 :+ a3 +}
list into list:
{+ list :+ list +}
file into surrounding (imports file as code):
{+ import:file.txt +}

//DECLARE
bracket: {= name : type := value =} 
one line [= name : type := value
compact: <=name:type:=value
You can use this operation to declare structures or any type of variable.
First comes the name than the type than the value
You do not have to use a name

You can declare template, synonym, list, structure and structure instance
template: 
 {= temp:Temp := {|sth {$slot1$} sth sth sth {$slot2$}|} =}
synonym:
 {= syn:Synonym := t, template, te, tem  =}
list:
 {= list:List:Temp := temp1, temp2, temp3, temp4 =}
sttruct:
 {= struct:Type := name1 : type1, name2 : type2, name3 : type3 =}
 {= struct:Type := name1, name2, name3 :type =}
structure instance
 {= instace:struct := name1:val1,name2:val2,name3:val3 =}
 {= instace:struct := val1, val2, val3 =}
...

//DELETE
bracket: {x name x} 
one line: [x name 
compact: <xname
You can use this operation to delete any allready created structures (including all of its instances) or any type of variable.
You have to add only the name of the object as input.

//COMPILATION MODE MARKERS

//Comment
bracket: {# name #} 
one line: [# name 
compact: <#name
You can add comments anywhere with this It skippes everything and it won't apeare in the final result

examples in the test_codes folder

hiányzó szintaxis egyszerűsítések:
	A zárójeleket megszámozással el lehet nevezni.
	Nem teszünk különbséget kis és nagy betű között
